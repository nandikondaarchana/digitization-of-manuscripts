{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f2379fb1",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name '__file__' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 13\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcv2\u001b[39;00m\n\u001b[0;32m     12\u001b[0m app \u001b[38;5;241m=\u001b[39m Flask(\u001b[38;5;18m__name__\u001b[39m)\n\u001b[1;32m---> 13\u001b[0m APP_ROOT \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mdirname(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mabspath(\u001b[38;5;18m__file__\u001b[39m))\n\u001b[0;32m     14\u001b[0m \u001b[38;5;28mprint\u001b[39m(APP_ROOT)\n\u001b[0;32m     15\u001b[0m \u001b[38;5;129m@app\u001b[39m\u001b[38;5;241m.\u001b[39mroute(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m/\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     16\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mindex\u001b[39m():\n",
      "\u001b[1;31mNameError\u001b[0m: name '__file__' is not defined"
     ]
    }
   ],
   "source": [
    "from flask import Flask, render_template, request, send_file\n",
    "import os\n",
    "os.environ[\"KMP_DUPLICATE_LIB_OK\"]=\"TRUE\"\n",
    "import easyocr\n",
    "from IPython.display import Image\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "import numpy\n",
    "import cv2\n",
    "\n",
    "\n",
    "app = Flask(__name__)\n",
    "APP_ROOT = os.path.dirname(os.path.abspath(__file__))\n",
    "print(APP_ROOT)\n",
    "@app.route(\"/\")\n",
    "def index():\n",
    "    if os.path.isdir('tmp/'):\n",
    "        for filename in os.listdir('tmp/'):\n",
    "            print(filename)\n",
    "            os.remove('tmp/' + filename)\n",
    "    if os.path.isfile('output.txt'):\n",
    "        print(\"1\")\n",
    "        os.remove('output.txt')\n",
    "    return render_template(\"index.html\")\n",
    "\n",
    "@app.route(\"/upload\", methods=[\"POST\",\"GET\"])\n",
    "def upload():\n",
    "    return render_template(\"upload.html\")\n",
    "\n",
    "\n",
    "def vconcat_resize(img_list, interpolation = cv2.INTER_CUBIC):\n",
    "      # take minimum width\n",
    "    w_min = min(img.shape[1] \n",
    "                for img in img_list)\n",
    "      \n",
    "    # resizing images\n",
    "    im_list_resize = [cv2.resize(img,\n",
    "                      (w_min, int(img.shape[0] * w_min / img.shape[1])),\n",
    "                                 interpolation = interpolation)\n",
    "                      for img in img_list]\n",
    "    # return final image\n",
    "    return cv2.vconcat(im_list_resize)\n",
    "\n",
    "@app.route(\"/process\", methods=[\"POST\",\"GET\"])\n",
    "def process():\n",
    "    target = os.path.join(APP_ROOT,'tmp/')\n",
    "    if not os.path.isdir(target):\n",
    "        os.mkdir(target)\n",
    "    \n",
    "    for file in request.files.getlist(\"file\"):\n",
    "        filename = file.filename\n",
    "        dest = \"/\".join([target, filename])\n",
    "        file.save(dest)\n",
    "    \n",
    "    onlyfiles = [ f for f in listdir(target) if isfile(join(target,f)) ]\n",
    "    images = numpy.empty(len(onlyfiles), dtype=object)\n",
    "    for n in range(0, len(onlyfiles)):\n",
    "        images[n] = cv2.imread( join(target,onlyfiles[n]) )\n",
    "  \n",
    "\n",
    "\n",
    "\n",
    "    img_v_resize = vconcat_resize([images[n] for n in range(0, len(onlyfiles))] )  \n",
    "    # show the output image\n",
    "    f = target+'vconcat_resize.jpg'\n",
    "    cv2.imwrite(f, img_v_resize)\n",
    "    i = request.form.get(\"language\")\n",
    "    reader = easyocr.Reader([i])\n",
    "    # image file to be extracted\n",
    "    \n",
    "    \n",
    "    Image(f)\n",
    "    # extracted text\n",
    "    ot = reader.readtext(f, detail=0)\n",
    "    otext = ' '.join([str(elem) for elem in ot])\n",
    "    encoded_unicode = otext.encode(\"utf8\")\n",
    "    a_file = open(\"output.txt\", \"wb\")\n",
    "    a_file.write(encoded_unicode)\n",
    "    a_file = open(\"output.txt\", \"r\")\n",
    "    return render_template(\"upload.html\")\n",
    "\n",
    "@app.route(\"/download\", methods=[\"GET\"])\n",
    "def download():\n",
    "    p = \"output.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "@app.route(\"/inform\", methods=[\"POST\",\"GET\"])\n",
    "def inform():\n",
    "    return render_template(\"Help.html\")\n",
    "@app.route(\"/feedback\", methods=[\"POST\",\"GET\"])\n",
    "def feedback():\n",
    "    return render_template(\"Contact.html\")\n",
    "\n",
    "@app.route(\"/archives\", methods=[\"POST\",\"GET\"])\n",
    "def archives():\n",
    "    return render_template(\"archive.html\")\n",
    "\n",
    "\n",
    "@app.route(\"/arc_hi\", methods=[\"GET\"])\n",
    "def arc_hi():\n",
    "    p = \"hindi.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "@app.route(\"/arc_te\", methods=[\"GET\"])\n",
    "def arc_te():\n",
    "    p = \"telugu.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "@app.route(\"/arc_ta\", methods=[\"GET\"])\n",
    "def arc_ta():\n",
    "    p = \"tamil.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "@app.route(\"/arc_be\", methods=[\"GET\"])\n",
    "def arc_be():\n",
    "    p = \"bengali.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "@app.route(\"/arc_mr\", methods=[\"GET\"])\n",
    "def arc_mr():\n",
    "    p = \"marathi.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "@app.route(\"/arc_ar\", methods=[\"GET\"])\n",
    "def arc_ar():\n",
    "    p = \"arabic.txt\"\n",
    "    return send_file(p,as_attachment=True)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug=False)\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58150f0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: easyocr in c:\\users\\nandi\\anaconda3\\lib\\site-packages (1.7.2)\n",
      "Requirement already satisfied: torch in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (2.6.0)\n",
      "Requirement already satisfied: torchvision>=0.5 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (0.21.0)\n",
      "Requirement already satisfied: opencv-python-headless in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (4.11.0.86)\n",
      "Requirement already satisfied: scipy in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (1.11.1)\n",
      "Requirement already satisfied: numpy in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (1.24.3)\n",
      "Requirement already satisfied: Pillow in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (9.4.0)\n",
      "Requirement already satisfied: scikit-image in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (0.20.0)\n",
      "Requirement already satisfied: python-bidi in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (0.6.3)\n",
      "Requirement already satisfied: PyYAML in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (6.0)\n",
      "Requirement already satisfied: Shapely in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (2.0.6)\n",
      "Requirement already satisfied: pyclipper in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (1.3.0.post6)\n",
      "Requirement already satisfied: ninja in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from easyocr) (1.11.1.3)\n",
      "Requirement already satisfied: filelock in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from torch->easyocr) (3.9.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from torch->easyocr) (4.12.2)\n",
      "Requirement already satisfied: networkx in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from torch->easyocr) (3.1)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from torch->easyocr) (3.1.2)\n",
      "Requirement already satisfied: fsspec in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from torch->easyocr) (2023.4.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from torch->easyocr) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from sympy==1.13.1->torch->easyocr) (1.3.0)\n",
      "Requirement already satisfied: imageio>=2.4.1 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from scikit-image->easyocr) (2.26.0)\n",
      "Requirement already satisfied: tifffile>=2019.7.26 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from scikit-image->easyocr) (2023.4.12)\n",
      "Requirement already satisfied: PyWavelets>=1.1.1 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from scikit-image->easyocr) (1.4.1)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from scikit-image->easyocr) (23.1)\n",
      "Requirement already satisfied: lazy_loader>=0.1 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from scikit-image->easyocr) (0.2)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\nandi\\anaconda3\\lib\\site-packages (from jinja2->torch->easyocr) (2.1.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install easyocr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe73b065",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
